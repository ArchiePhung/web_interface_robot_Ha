{"ast":null,"code":"var _jsxFileName = \"/home/archie/simulation_ws/src/web_interfaces/react-ros-robot/src/components/Connection.jsx\";\nimport React, { Component } from \"react\";\nimport ROSLIB from \"roslib\";\n// import ROS2D from \"ros2d\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Connection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      connected: false,\n      ros: null\n    };\n    this.init_connection();\n  }\n  init_connection() {\n    this.state.ros = new ROSLIB.Ros();\n    console.log(\"Da khoi tao duoc ros\");\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed\");\n      this.setState({\n        connected: false\n      });\n\n      // try to recconect every 3 seconds\n      setTimeout(() => {\n        try {\n          // this.state.ros.connect(\"ws://192.168.1.45:9090\");\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, 3000);\n    });\n    try {\n      // this.state.ros.connect(\"ws://192.168.1.45:9090\");\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n      console.log(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        className: \"text-center m-3\",\n        variant: this.state.connected ? \"success\" : \"danger\",\n        children: this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Connection;","map":{"version":3,"names":["React","Component","ROSLIB","Alert","Config","jsxDEV","_jsxDEV","Connection","constructor","state","connected","ros","init_connection","Ros","console","log","on","setState","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","render","children","className","variant","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/archie/simulation_ws/src/web_interfaces/react-ros-robot/src/components/Connection.jsx"],"sourcesContent":["import React, {Component} from \"react\";\nimport ROSLIB from \"roslib\";\n// import ROS2D from \"ros2d\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\"\n\nclass Connection extends Component{\n    state = {\n        connected: false,\n        ros:null,\n    };\n\n    constructor() {\n        super();\n        this.init_connection();\n    }\n\n    init_connection(){\n\n        this.state.ros = new ROSLIB.Ros();\n        console.log(\"Da khoi tao duoc ros\");\n\n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established!\");\n            this.setState({connected: true});\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection is closed\");\n            this.setState({connected: false});\n\n            // try to recconect every 3 seconds\n            setTimeout(() => {\n                try{\n                    // this.state.ros.connect(\"ws://192.168.1.45:9090\");\n                    this.state.ros.connect(\n                        \"ws://\" + \n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" + \n                        Config.ROSBRIDGE_SERVER_PORT +\n                        \"\"\n                    );\n                } catch (error) {\n                    console.log(\"connection problem\");\n                }                \n            }, 3000);\n        });\n\n        try{\n            // this.state.ros.connect(\"ws://192.168.1.45:9090\");\n            this.state.ros.connect(\n                \"ws://\" + \n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" + \n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            );\n\n            console.log(\n                \"ws://\" + \n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" + \n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            );\n        } catch (error) {\n            console.log(\"connection problem\");\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Alert className=\"text-center m-3\"\n                        variant={this.state.connected ? \"success\" : \"danger\"}>\n                    {this.state.connected? \"Robot Connected\": \"Robot Disconnected\"}\n                </Alert>\n            </div>\n        );\n    }\n}\n\nexport default Connection;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAOC,MAAM,MAAM,QAAQ;AAC3B;AACA,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,MAAM,MAAM,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,UAAU,SAASN,SAAS;EAM9BO,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IAAC,KANZC,KAAK,GAAG;MACJC,SAAS,EAAE,KAAK;MAChBC,GAAG,EAAC;IACR,CAAC;IAIG,IAAI,CAACC,eAAe,CAAC,CAAC;EAC1B;EAEAA,eAAeA,CAAA,EAAE;IAEb,IAAI,CAACH,KAAK,CAACE,GAAG,GAAG,IAAIT,MAAM,CAACW,GAAG,CAAC,CAAC;IACjCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IAEnC,IAAI,CAACN,KAAK,CAACE,GAAG,CAACK,EAAE,CAAC,YAAY,EAAE,MAAM;MAClCF,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC,IAAI,CAACE,QAAQ,CAAC;QAACP,SAAS,EAAE;MAAI,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAACD,KAAK,CAACE,GAAG,CAACK,EAAE,CAAC,OAAO,EAAE,MAAM;MAC7BF,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC,IAAI,CAACE,QAAQ,CAAC;QAACP,SAAS,EAAE;MAAK,CAAC,CAAC;;MAEjC;MACAQ,UAAU,CAAC,MAAM;QACb,IAAG;UACC;UACA,IAAI,CAACT,KAAK,CAACE,GAAG,CAACQ,OAAO,CAClB,OAAO,GACPf,MAAM,CAACgB,mBAAmB,GAC1B,GAAG,GACHhB,MAAM,CAACiB,qBAAqB,GAC5B,EACJ,CAAC;QACL,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZR,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACrC;MACJ,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,CAAC;IAEF,IAAG;MACC;MACA,IAAI,CAACN,KAAK,CAACE,GAAG,CAACQ,OAAO,CAClB,OAAO,GACPf,MAAM,CAACgB,mBAAmB,GAC1B,GAAG,GACHhB,MAAM,CAACiB,qBAAqB,GAC5B,EACJ,CAAC;MAEDP,OAAO,CAACC,GAAG,CACP,OAAO,GACPX,MAAM,CAACgB,mBAAmB,GAC1B,GAAG,GACHhB,MAAM,CAACiB,qBAAqB,GAC5B,EACJ,CAAC;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZR,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrC;EAEJ;EAEAQ,MAAMA,CAAA,EAAG;IACL,oBACIjB,OAAA;MAAAkB,QAAA,eACIlB,OAAA,CAACH,KAAK;QAACsB,SAAS,EAAC,iBAAiB;QAC1BC,OAAO,EAAE,IAAI,CAACjB,KAAK,CAACC,SAAS,GAAG,SAAS,GAAG,QAAS;QAAAc,QAAA,EACxD,IAAI,CAACf,KAAK,CAACC,SAAS,GAAE,iBAAiB,GAAE;MAAoB;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAEd;AACJ;AAEA,eAAevB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}